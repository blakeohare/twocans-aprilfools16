import Web;
import Math;
import GFX;


enum Mode {
	
	NONE,
	
	FALLS_DOWN, // T
	SHIVERS, // W
	BOMB_EXPLODES, // O
	DRAW_ON_SCREEN, // C
	RUNS_AROUND, // A
	PERSON_CHANGES, // N
	INVERT_COLORS, // S
	
	DONT_GET_BANNED, // S
	CREDITS, // T
	SCENERY, // R
	TODO_IMPLEMENT, // I
	TOTORO, // N
	BANNED, // G
}

enum LetterFallModes {
	FALLING_DOWN,
	HITTING_PLAYER,
	FALLING_BACK,
	BOTH_BACK,
}

const GROUND_Y = SCREEN_HEIGHT * 3 / 4;
const LETTERS_Y = SCREEN_HEIGHT / 3;

class MainScene : AbstractScene {
	field mode = Mode.NONE;
	field modeCounter = 0;
	field person = null;
	field letters = [];
	field sprites = null;
	field otherSprites = [];
	field activeLetter = null;
	field queuedMode = null;
	field tFallState = null; // { falling, pFalling, return }
	field state = null;
	field stateCounter = 0;
	field totoro = null;
	field drawBg = null;
	field mouseX = SCREEN_WIDTH / 2;
	field mouseY = SCREEN_HEIGHT / 2;
	
	constructor() : base() {
	
		this.person = new Sprite(SpriteType.PERSON, SCREEN_WIDTH / 2, GROUND_Y);
		this.person.canHitTest = true;
		this.person.personFlavor = Sprite.PERSON_FLAVORS[0];
		
		this.restoreLetters();
	}
	
	function restoreLetters() {
		this.sprites = null;
		
		this.letters.clear();
		
		chars = 'TWOCANS&STRING';
		x = SCREEN_WIDTH / 6;
		modes = [
			Mode.FALLS_DOWN, // T
			Mode.SHIVERS, // W
			Mode.BOMB_EXPLODES, // O
			
			Mode.DRAW_ON_SCREEN, // C
			Mode.RUNS_AROUND, // A
			Mode.PERSON_CHANGES, // N
			Mode.INVERT_COLORS, // S
			
			Mode.NONE, // &
			
			Mode.DONT_GET_BANNED, // S
			Mode.CREDITS, // T
			Mode.SCENERY, // R
			Mode.TODO_IMPLEMENT, // I
			Mode.TOTORO, // N
			Mode.BANNED, // G
		];
		for (i = 0; i < chars.length; ++i) {
			c = chars[i];
			sprite = new Sprite(SpriteType.LETTER, x, LETTERS_Y);
			sprite.letterMode = modes[i];
			sprite.letter = c;
			sprite.canHitTest = c != '&';
			x += SCREEN_WIDTH * 2 / (chars.length * 3);
			if (i == 0) x -= 6;
			if (i == 1) x += 12;
			if (i == 6) x += 8;
			if (c == '&') x += 8;
			if (c == 'I') x -= 16;
			if (c == 'O') x += 12;
			this.letters.add(sprite);
		}
	}
	
	function isModeLocked() {
		// TODO: return true in instances where you want to prevent the user from 
		// progressing to another mode.
		return false;
	}
	
	function changePerson() {
		this.person.personFlavorIndex++;
		this.person.personFlavor = Sprite.PERSON_FLAVORS[this.person.personFlavorIndex % Sprite.PERSON_FLAVORS.length];
		this.otherSprites.add(new Sprite(SpriteType.SMOKE, this.person.x, this.person.y));
		this.mode = Mode.NONE;
		this.queuedMode = null;
		this.person.specialMode = null;
		this.person.specialModeCounter = FPS * 3 / 2;
	}
	
	// previous mode is guaranteed to be over
	function launchMode(mode) {
		switch (this.mode) {
			case Mode.FALLS_DOWN:
				this.tFallState = 'falling';
				break;
			
			case Mode.SHIVERS:
				break;
		}
	}
	
	// each mode is responsible for setting this.mode = Mode.NONE, as it may be asynchronous.
	function endMode() {
		switch (this.mode) {
			case Mode.BOMB_EXPLODES:
			case Mode.FALLS_DOWN:
			case Mode.RUNS_AROUND:
			case Mode.TOTORO:
				// just wait for it to end.
				break;
			
			case Mode.DRAW_ON_SCREEN:
				this.mode = Mode.NONE;
				this.drawBg = null;
				break;
				
			case Mode.SHIVERS:
				for (letter : this.letters) {
					letter.renderOffsetXY = null;
				}
				this.mode = Mode.NONE;
				break;
			
			case Mode.INVERT_COLORS:
				this.state = 'out';
				this.stateCounter = 0;
				break;
			
			default:
				this.mode = Mode.NONE;
				this.state = null;
				break;
		}
	}
	
	function update(events) {
		
		if (this.mode == Mode.NONE && this.queuedMode != null) {
			this.launchMode(this.queuedMode);
			this.mode = this.queuedMode;
			this.queuedMode = null;
			this.modeCounter = 0;
		}
		
		for (event : events) {
			if (event.type == EventType.MOUSE_MOVE) {
				this.mouseX = event.x;
				this.mouseY = event.y;
			}
			if (!this.isModeLocked()) {
				if (event.type == EventType.MOUSE_LEFT_DOWN && this.queuedMode == null) {
					sprite = this.hitTestSprites(event.x, event.y);
					if (sprite != null) {
						if (sprite.type == SpriteType.PERSON) {
							Web.launchBrowser('http://twocansandstring.com');
						} else if (sprite.type == SpriteType.LETTER) {
							// clicked the same letter
							if (this.mode == sprite.letterMode) {
								if (this.mode == Mode.NONE) {
									// do nothing
								} else {
									// end this mode.
									this.endMode();
									this.queuedMode = Mode.NONE;
								}
							} else { // clicked another letter
								if (this.mode != Mode.NONE) {
									this.endMode(); // end the current mode
								}
								this.queuedMode = sprite.letterMode; // queue up the next mode.
								if (this.queuedMode == Mode.PERSON_CHANGES) {
									this.changePerson();
								}
							}
						}
					}
				}
				
				switch (this.mode) {
					case Mode.SCENERY:
						// TODO: process scenery events
						break;
						
					case Mode.DRAW_ON_SCREEN:
						
						if (this.drawBg == null) {
							this.drawBg = new DrawingBackground();
						}
						if (event.type == EventType.MOUSE_MOVE) {
							if (this.drawBg.isPressed) {
								this.drawBg.draw(event.x, event.y);
							}
						} else if (event.type == EventType.MOUSE_LEFT_DOWN) {
							this.drawBg.draw(event.x, event.y);
							this.drawBg.isPressed = true;
						} else if (event.type == EventType.MOUSE_LEFT_UP) {
							this.drawBg.isPressed = false;
						}
						
						break;
					
					default: break;
				}
			}
		}
		
		if (this.mode != null) {
			switch (this.mode) {
				
				case Mode.BOMB_EXPLODES:
					if (this.state == null) {
						this.state = 'fuse';
						this.stateCounter = 0;
					}
					activeLetter = this.letters[2];
					
					switch (this.state) {
						case 'fuse':
							activeLetter.specialMode = 'O-bomb';
							if (this.stateCounter == FPS * 2) {
								this.state = 'out';
								this.stateCounter = 0;
								activeLetter.specialMode = null;
							}
							break;
						
						case 'out':
							for (i = 0; i < this.letters.length; ++i) {
								letter = this.letters[i];
								x = 16;
								y = 16;
								if (i % 2 == 1) x *= -1;
								if (i % 3 == 1) y *= -1;
								letter.x += x;
								letter.y += y;
							}
							if (this.stateCounter == FPS) {
								this.state = 'in';
								this.stateCounter = 0;
							}
							break;
						
						case 'in':
							done = false;
							for (letter : this.letters) {
								if (letter.x == letter.homeX) {
									done = true;
									break;
								}
								
								if (letter.x < letter.homeX) {
									letter.x += 16;
								} else {
									letter.x -= 16;
								}
								
								if (letter.y < letter.homeY) {
									letter.y += 16;
								} else {
									letter.y -= 16;
								}
							}
							
							if (done) {
								this.mode = Mode.NONE;
								this.state = null;
							}
							break;
					}
					
					this.stateCounter++;
					break;
				
				case Mode.CREDITS:
					if (this.state == null) {
						this.state = 1;
						this.stateCounter = 0;
					}
					
					if (this.stateCounter >= FPS * 3) {
						this.state++;
						this.stateCounter = 0;
					}
					
					if (this.state >= 6) {
						this.state = null;
						this.mode = Mode.NONE;
					}
					this.stateCounter++;
					break;
				
				case Mode.FALLS_DOWN:
					
					if (this.tFallState == null) this.tFallState = 'falling';
					switch (this.tFallState) {
						case 'falling':
							if (abs(this.letters[0].y - GROUND_Y) < 10) {
								if (abs((this.letters[0].x - 20) - this.person.x) < 40) {
									this.tFallState = 'pFalling';
									this.person.isFrozen = true;
									this.person.specialMode = null;
								}
							}
							
							this.letters[0].y += 8;
							if (this.letters[0].y > SCREEN_HEIGHT + 100) {
								this.letters[0].y = -100;
								this.tFallState = 'return';
							}
							
							break;
							
						case 'pFalling':
							this.letters[0].y += 12;
							this.person.y += 8;
							if (this.letters[0].y > SCREEN_HEIGHT + 100) {
								this.letters[0].y = -100;
								this.person.y = -100;
								this.tFallState = 'return';
							}
							break;
							
						case 'return':
							this.letters[0].y += 4;
							letterBack = false;
							if (this.letters[0].y > this.letters[0].homeY) {
								this.letters[0].y = this.letters[0].homeY;
								letterBack = true;
							}
							if (this.person.isFrozen) {
								this.person.y += 4;
								if (this.person.y > GROUND_Y) {
									this.person.y = GROUND_Y;
									this.person.isFrozen = false;
								}
							}
							
							if (letterBack && !this.person.isFrozen) {
								this.tFallState = null;
								this.mode = Mode.NONE;
							}
							break;
							
						default:
							assert(false, "Unknown T-Fall state:" + (this.tFallState ?? 'null'));
							break;
					}
					break;
				
				case Mode.INVERT_COLORS:
					if (this.state == null) {
						this.state = 'in';
						this.stateCounter = 0;
					}
					
					switch (this.state) {
						case 'in':
							if (this.stateCounter > FPS) {
								this.state = 'inverted';
								this.stateCounter = 0;
							}
							break;
							
						case 'inverted':
							// do nothing.
							break;
						
						case 'out':
							if (this.stateCounter > FPS) {
								this.state = null;
								this.mode = Mode.NONE;
							}
							break;
					}
					this.stateCounter++;
					break;
				
				case Mode.RUNS_AROUND:
					activeLetter = this.letters[4];
					if (this.state == null) {
						this.state = 'fall';
					}
					switch (this.state) {
						case 'fall':
							activeLetter.specialMode = 'A-run';
							activeLetter.y += 5;
							if (activeLetter.y > GROUND_Y) {
								activeLetter.y = GROUND_Y;
								this.state = 'run1';
							}
							break;
							
						case 'run1':
							activeLetter.x += 5;
							if (activeLetter.x > SCREEN_WIDTH + 50) {
								activeLetter.x = -30;
								activeLetter.y = LETTERS_Y;
								this.state = 'run2';
							}
							break;
							
						case 'run2':
							activeLetter.x += 5;
							if (activeLetter.x > activeLetter.homeX) {
								activeLetter.x = activeLetter.homeX;
								this.mode = Mode.NONE;
								this.state = null;
								activeLetter.specialMode = null;
							}
							break;
							
						default:
							this.state = null;
							break;
					}
					break;
				
				case Mode.SHIVERS:
					for (i = 0; i < this.letters.length; ++i) {
						letter = this.letters[i];
						if (letter.renderOffsetXY == null) {
							letter.renderOffsetXY = [0, 0];
						}
						
						t = this.modeCounter * Math.PI * 2 / FPS * 5;
						value = floor(Math.sin(t) * 3);
						x = value;
						y = value;
						if (i % 3 == 2) x *= -1;
						if (i % 2 == 1) y *= -1;
						letter.renderOffsetXY[0] = x;
						letter.renderOffsetXY[1] = y;
					}
					break;
				
				case Mode.TOTORO:
					if (this.state != 'ttr-run') {
						this.state = 'ttr-run';
						this.totoro = new Sprite(SpriteType.TOTORO, SCREEN_WIDTH + 40, GROUND_Y);
						this.otherSprites.add(this.totoro);
						this.sprites = null;
					}
					
					this.totoro.x -= 7;
					
					// remove sprite from scene once it falls off the left side of the screen.
					if (this.totoro.x < -30) {
						this.totoro.dead = true; // in my 20 years of being a programmer, this is, by far, the saddest line of code I have ever written.
						this.mode = Mode.NONE;
						this.state = null;
					}
					
					break;
			}
		}
		
		for (sprite : this.getAllSprites()) {
			sprite.update(this);
		}
		
		if (this.otherSprites.length > 0) {
			newSprites = [];
			for (sprite : this.otherSprites) {
				if (!sprite.dead) {
					newSprites.add(sprite);
				}
			}
			if (newSprites.length != this.otherSprites) {
				this.sprites = null;
			}
			this.otherSprites = newSprites;
		}
		
		this.modeCounter++;
	}
	
	function hitTestSprites(x, y) {
		for (sprite : this.getAllSprites()) {
			if (sprite.canHitTest && sprite.lastImageBounds != null) {
				bounds = sprite.lastImageBounds;
				if (x > bounds[0] && x < bounds[2] && y > bounds[1] && y < bounds[3]) {
					return sprite;
				}
			}
		}
		return null;
	}
	
	function getAllSprites() {
		if (this.sprites == null) {
			this.sprites = [this.person];
			this.sprites.concat(this.letters);
			this.sprites.concat(this.otherSprites);
		}
		return this.sprites;
	}
	
	function render(rc) {
		if (this.mode == Mode.INVERT_COLORS) {
			inversionAmount = 0;
			if (this.state != null) {
				switch (this.state) {
					case 'in':
						inversionAmount = 255 * this.stateCounter / FPS;
						break;
					case 'inverted':
						inversionAmount = 255;
						break;
					case 'out':
						inversionAmount = 255 - 255 * this.stateCounter / FPS;
						break;
					default:
						break;
				}
			}
			inversionAmount = ensureRange(inversionAmount, 0, 255);
			c = 255 - inversionAmount;
			GFX.Draw.fill(c, c, c);
		} else {
			inversionAmount = 0;
			GFX.Draw.fill(255, 255, 255);
		}
		
		for (letter : this.letters) {
			letter.inversion = inversionAmount;
		}
		
		msg = null;
		if (this.mode == Mode.DONT_GET_BANNED) {
			if ((rc / 7) % 2 == 0) {
				msg = ImageLibrary.get('messages/dont_press_g');
			}
		} else if (this.mode == Mode.CREDITS) {
			if (this.stateCounter < 2.5 * FPS) {
				msg = ImageLibrary.get('messages/credits' + this.state);
			}
		}
		
		if (msg != null) {
			msg.draw((SCREEN_WIDTH - msg.width) / 2, SCREEN_HEIGHT / 2);
		}
		
		x = 0;
		y = 0;
		if (this.drawBg != null) {
			this.drawBg.render();
			cursor = ImageLibrary.get('cursor2', true);
			x = 20;
			y = -8;
		} else {
			x = 6;
			cursor = ImageLibrary.get('cursor1', true);
		}
		
		for (sprite : this.getAllSprites()) {
			sprite.render(rc);
		}
		
		cursor.draw(this.mouseX - cursor.width / 2 + x, this.mouseY - 3 + y);
		
	}
}
